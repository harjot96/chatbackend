const http = require('http');
const socketIo = require('socket.io');
const app = require('./src/app');
const config = require('./src/config');
const SocketService = require('./src/services/socketService');

// Create HTTP server
const server = http.createServer(app);

// Initialize Socket.IO
const io = socketIo(server, {
  cors: config.socket.cors
});

// Initialize Socket service
const socketService = new SocketService(io);
socketService.initialize();

// Start server
server.listen(config.server.port, () => {
  console.log('\n' + '='.repeat(60));
  console.log('üöÄ Chat Server Started Successfully!');
  console.log('='.repeat(60));
  console.log(`üì° Server running on port: ${config.server.port}`);
  console.log(`üåç Environment: ${config.server.env}`);
  console.log(`üîó Base URL: http://localhost:${config.server.port}`);
  console.log(`\n‚ú® Features Enabled:`);
  console.log('   ‚úì User Registration & Authentication (JWT)');
  console.log('   ‚úì Real-time Chat (Socket.IO)');
  console.log('   ‚úì Online/Offline Status Tracking');
  console.log('   ‚úì Message Read Receipts');
  console.log('   ‚úì Message Delivery Status');
  console.log('   ‚úì Typing Indicators');
  console.log('   ‚úì Message History');
  console.log('   ‚úì Multi-room Support');
  console.log(`\nüìö API Endpoints:`);
  console.log(`   ‚Üí API Docs: http://localhost:${config.server.port}/`);
  console.log(`   ‚Üí Health Check: http://localhost:${config.server.port}/api/health`);
  console.log(`\nüí° Quick Start:`);
  console.log(`   1. Open test-client-with-auth.html in your browser`);
  console.log(`   2. Register/Login or join as guest`);
  console.log(`   3. Start chatting!`);
  console.log('\n' + '='.repeat(60) + '\n');
}).on('error', (err) => {
  if (err.code === 'EADDRINUSE') {
    console.error(`\n‚ùå Error: Port ${config.server.port} is already in use!`);
    console.log(`üí° Try running with a different port:`);
    console.log(`   PORT=4000 npm start\n`);
  } else {
    console.error('‚ùå Server error:', err);
  }
  process.exit(1);
});

// Graceful shutdown
const gracefulShutdown = (signal) => {
  console.log(`\n${signal} signal received: closing server gracefully...`);
  server.close(() => {
    console.log('‚úÖ Server closed successfully');
    process.exit(0);
  });

  // Force close after 10 seconds
  setTimeout(() => {
    console.error('‚ö†Ô∏è  Forced shutdown after timeout');
    process.exit(1);
  }, 10000);
};

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// Handle uncaught exceptions
process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

module.exports = server;
